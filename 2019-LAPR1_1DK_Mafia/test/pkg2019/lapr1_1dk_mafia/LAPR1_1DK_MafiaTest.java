package pkg2019.lapr1_1dk_mafia;

import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.Arrays;
import org.junit.Test;
import static org.junit.Assert.*;

public class LAPR1_1DK_MafiaTest {

    public LAPR1_1DK_MafiaTest() {
    }
    String[] args = null;
    PrintWriter out = null;

    /**
     * Test of readFile method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testReadFileDAYTON() throws Exception {
        System.out.println("readFile");
        int[] consumptionMW = new int[26280];
        LocalDateTime[] dateTime = new LocalDateTime[26280];
        int expResult = 22680;
        int result = LAPR1_1DK_Mafia.readFile(consumptionMW, dateTime, args);
        assertEquals(expResult, result);
    }

    /**
     * Test of dayPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testDayPeriodMadrugada() throws Exception {
        System.out.println("dayPeriodMadrugada - 1 mês");
        int[] consuptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = new LocalDateTime[26280];
        int startPeriod = 0;
        int size = consuptionMW.length;
        LAPR1_1DK_Mafia.dayPeriod(consuptionMW, size, startPeriod);
        size = LAPR1_1DK_Mafia.exchangeInfoDayPeriods(consuptionMW, size, startPeriod, dateTime);
        int[] expResult = {10160, 10515, 10180, 11015, 12689, 12506, 11935, 11051, 9477, 8913, 13177, 12726, 14278, 12842, 10929, 10564, 10751, 14125, 14597, 13736, 13472, 12896, 12261, 11833, 11679, 10678, 11939, 12338, 11157, 10820, 8731};
        int[] result = Arrays.copyOf(consuptionMW, size);
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of dayPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testDayPeriodManha() throws Exception {
        System.out.println("dayPeriodManha - 1 mês");
        int[] consuptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = new LocalDateTime[26280];
        int startPeriod = 6;
        int size = consuptionMW.length;
        LAPR1_1DK_Mafia.dayPeriod(consuptionMW, size, startPeriod);
        size = LAPR1_1DK_Mafia.exchangeInfoDayPeriods(consuptionMW, size, startPeriod, dateTime);
        int[] expResult = {10706, 11462, 10947, 13576, 14955, 14623, 14073, 13063, 10281, 10285, 15906, 14471, 16455, 14508, 13047, 11960, 11817, 16464, 16523, 15696, 15754, 15026, 13307, 12725, 14155, 13184, 14281, 14054, 13604, 11564, 9463};
        int[] result = Arrays.copyOf(consuptionMW, size);
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of dailyPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testDailyPeriodTarde() throws Exception {
        System.out.println("dayPeriodTarde - 1 mês");
        int[] consuptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = new LocalDateTime[26280];
        int startPeriod = 12;
        int size = consuptionMW.length;
        LAPR1_1DK_Mafia.dayPeriod(consuptionMW, size, startPeriod);
        size = LAPR1_1DK_Mafia.exchangeInfoDayPeriods(consuptionMW, size, startPeriod, dateTime);
        int[] expResult = {11400, 11098, 11742, 13908, 13796, 13440, 12782, 13084, 10758, 12626, 15623, 14996, 15815, 13133, 13122, 12730, 12970, 16173, 15248, 15549, 14546, 14948, 12837, 11944, 13388, 13995, 14304, 13002, 13046, 10559, 10173};
        int[] result = Arrays.copyOf(consuptionMW, size);
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of dailyPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Not working
    public void testDailyPeriodNoite() throws Exception {
        System.out.println("dayPeriodNoite - 1 mês");
        int[] consuptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = new LocalDateTime[26280];
        int startPeriod = 18;
        int size = consuptionMW.length;
        LAPR1_1DK_Mafia.dayPeriod(consuptionMW, size, startPeriod);
        size = LAPR1_1DK_Mafia.exchangeInfoDayPeriods(consuptionMW, size, startPeriod, dateTime);
        int[] expResult = {12097, 11734, 12607, 14637, 14516, 13911, 13242, 12285, 10834, 14204, 15597, 16216, 15653, 13151, 12736, 12664, 14823, 16737, 15818, 15609, 15027, 14841, 13124, 12870, 13354, 14183, 14522, 13249, 13020, 10442, 10634};
        int[] result = Arrays.copyOf(consuptionMW, size);
        System.out.println(Arrays.toString(expResult));
        System.out.println(Arrays.toString(result));
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of monthlyPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testMonthlyPeriod() throws Exception {
        System.out.println("monthlyPeriod - 2 meses completos + 1 incompleto");

        int[] auxConsumptionMW = new int[26280];
        LocalDateTime[] auxDateTime = new LocalDateTime[26280];
        LAPR1_1DK_Mafia.readFile(auxConsumptionMW, auxDateTime, args);

        int[] consumptionMW = {1793,1741,1694,1659,1630,1643,1677,1719,1780,1793,1854,1883,1906,1904,1890,1886,1890,1924,2039,2079,2058,2029,1982,1910,1846,1786,1737,1713,1706,1727,1771,1843,1934,1951,1975,1988,1947,1918,1855,1807,1780,1791,1924,2012,1997,1984,1942,1875,1798,1733,1683,1660,1651,1655,1683,1729,1809,1850,1925,1951,1955,1963,1934,1925,1955,2010,2136,2182,2159,2133,2045,1952,1897,1837,1807,1800,1812,1862,1997,2204,2346,2355,2340,2334,2315,2325,2336,2311,2298,2323,2432,2513,2502,2478,2418,2294,2185,2124,2090,2063,2086,2141,2272,2484,2607,2578,2532,2482,2405,2359,2307,2260,2215,2250,2384,2497,2498,2466,2392,2279,2167,2103,2056,2043,2040,2097,2222,2441,2559,2508,2473,2420,2357,2292,2250,2198,2159,2184,2308,2399,2390,2351,2287,2176,2065,2009,1968,1947,1943,2003,2127,2341,2474,2431,2381,2319,2253,2206,2148,2094,2047,2034,2169,2269,2276,2256,2194,2078,1954,1880,1825,1792,1779,1821,1926,2129,2252,2251,2247,2258,2247,2226,2206,2170,2120,2115,2163,2155,2093,2049,1965,1860,1727,1631,1567,1531,1511,1510,1553,1621,1702,1751,1809,1845,1842,1832,1800,1763,1749,1772,1857,1887,1858,1807,1750,1675,1594,1543,1476,1445,1423,1432,1470,1554,1679,1775,1868,1939,2012,2069,2106,2111,2131,2197,2313,2421,2415,2409,2363,2283,2224,2192,2171,2169,2185,2236,2383,2592,2735,2744,2734,2718,2691,2666,2624,2581,2518,2543,2655,2726,2696,2620,2522,2378,2267,2171,2109,2064,2045,2070,2179,2367,2474,2470,2496,2485,2489,2505,2500,2497,2485,2520,2673,2816,2796,2742,2651,2538,2455,2390,2355,2336,2347,2395,2518,2705,2841,2854,2798,2739,2694,2656,2637,2622,2596,2610,2683,2743,2700,2615,2527,2385,2271,2180,2124,2083,2076,2108,2229,2415,2538,2492,2448,2386,2312,2254,2208,2162,2110,2087,2172,2281,2268,2236,2159,2035,1929,1853,1799,1768,1767,1813,1932,2127,2258,2241,2239,2250,2237,2211,2200,2178,2140,2156,2222,2223,2168,2113,2050,1960,1844,1790,1738,1730,1721,1741,1794,1874,1972,2054,2116,2150,2152,2143,2123,2100,2099,2113,2167,2187,2154,2116,2062,1978,1890,1821,1770,1748,1754,1768,1808,1871,1948,2008,2076,2106,2131,2133,2142,2172,2172,2220,2361,2506,2515,2521,2492,2428,2389,2350,2323,2329,2341,2393,2503,2667,2799,2830,2845,2820,2778,2742,2706,2678,2620,2649,2768,2885,2880,2828,2749,2627,2526,2456,2415,2389,2387,2424,2542,2723,2863,2871,2801,2723,2670,2615,2560,2489,2459,2455,2567,2714,2708,2693,2625,2511,2409,2325,2277,2237,2223,2265,2372,2580,2684,2680,2684,2696,2676,2650,2613,2563,2515,2532,2621,2703,2679,2635,2551,2420,2312,2240,2212,2210,2221,2277,2399,2603,2724,2712,2693,2623,2552,2489,2442,2380,2324,2359,2479,2583,2576,2558,2472,2359,2246,2169,2134,2106,2099,2142,2256,2456,2583,2576,2575,2580,2564,2539,2500,2470,2433,2442,2498,2574,2528,2492,2430,2319,2182,2089,2025,1994,1978,1993,2035,2108,2212,2278,2329,2345,2306,2224,2146,2072,2040,2049,2122,2241,2231,2219,2187,2124,2039,1981,1952,1946,1946,1969,2010,2071,2154,2186,2176,2128,2078,2033,1994,1948,1932,1959,2073,2196,2215,2194,2139,2053,1993,1948,1919,1914,1925,1980,2110,2336,2468,2455,2408,2378,2295,2253,2234,2228,2197,2181,2284,2340,2317,2248,2149,2016,1898,1820,1765,1727,1709,1759,1880,2111,2274,2283,2305,2331,2342,2346,2339,2326,2316,2326,2411,2459,2428,2386,2314,2185,2082,2014,1966,1943,1941,1993,2128,2330,2470,2454,2450,2449,2423,2405,2394,2366,2341,2375,2445,2515,2486,2446,2380,2250,2161,2091,2051,2009,1998,2028,2138,2338,2447,2419,2377,2335,2253,2225,2170,2132,2096,2126,2222,2292,2280,2243,2161,2051,1937,1874,1830,1822,1823,1871,1998,2206,2338,2340,2356,2366,2317,2254,2206,2134,2069,2066,2111,2239,2233,2205,2166,2066,1950,1848,1777,1751,1741,1753,1796,1871,1958,1991,1996,1952,1897,1825,1771,1724,1675,1667,1724,1823,1792,1761,1710,1632,1556,1495,1449,1421,1405,1405,1430,1491,1556,1611,1677,1698,1710,1712,1693,1680,1679,1699,1785,1855,1833,1793,1722,1646,1578,1521,1509,1498,1522,1582,1726,1972,2116,2134,2137,2140,2120,2119,2084,2031,1963,1955,2008,2177,2200,2181,2123,2027,1924,1866,1833,1809,1808,1864,1976,2198,2327,2300,2279,2245,2218,2201,2141,2076,2029,2048,2091,2173,2133,2086,2008,1877,1753,1685,1626,1583,1573,1596,1706,1901,2032,2016,2006,2003,1983,1971,1962,1940,1914,1923,2002,2144,2158,2141,2100,1986,1892,1825,1803,1767,1778,1833,1965,2189,2329,2345,2349,2383,2375,2375,2352,2337,2310,2326,2378,2461,2444,2418,2338,2218,2119,2057,2012,2001,2003,2049,2179,2407,2514,2461,2399,2329,2264,2199,2154,2094,2046,2061,2103,2206,2190,2170,2124,2039,1928,1855,1806,1798,1791,1832,1894,1992,2103,2127,2118,2072,2012,1945,1884,1825,1782,1792,1835,1977,2007,1998,1962,1889,1804,1741,1694,1679,1676,1675,1704,1776,1837,1867,1882,1856,1841,1802,1761,1728,1722,1749,1827,1920,1894,1864,1827,1780,1734,1671,1631,1626,1630,1680,1820,2053,2201,2207,2210,2237,2248,2252,2231,2183,2172,2186,2250,2351,2368,2343,2277,2170,2078,2014,1975,1951,1963,2003,2132,2331,2449,2468,2490,2509,2498,2494,2480,2479,2465,2477,2527,2614,2606,2540,2469,2345,2258,2192,2164,2137,2148,2191,2325,2522,2633,2662,2649,2641,2591,2563,2556,2543,2537,2564,2633,2746,2744,2714,2640,2511,2410,2344,2294,2270,2278,2335,2467,2686,2796,2751,2680,2626,2555,2505,2488,2458,2416,2418,2457,2586,2606,2574,2504,2413,2317,2260,2228,2211,2220,2272,2364,2549,2638,2627,2607,2591,2524,2498,2482,2448,2409,2424,2449,2517,2542,2506,2467,2376,2269,2198,2151,2139,2142,2166,2221,2312,2389,2412,2409,2385,2341,2285,2249,2219,2214,2224,2255,2385,2411,2404,2373,2309,2252,2197,2156,2137,2133,2146,2172,2228,2280,2329,2335,2273,2221,2234,2218,2221,2260,2303,2362,2441,2457,2418,2352,2272,2206,2164,2112,2084,2082,2113,2210,2347,2460,2481,2511,2527,2504,2466,2443,2408,2364,2354,2388,2461};
        LocalDateTime[] dateTime = Arrays.copyOf(auxDateTime, 1100);
        int size = consumptionMW.length;
        LAPR1_1DK_Mafia.monthlyPeriod(consumptionMW, dateTime, size);
        int[] expResult = {1618977, 776076};
        int[] result = Arrays.copyOf(consumptionMW, 2);
        System.out.println(Arrays.toString(expResult));
        System.out.println(Arrays.toString(result));
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of getMonthLength method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testGetMonthLengthJan() {
        System.out.println("getMonthLengthJanuary");
        LocalDateTime[] dateTime = {LocalDateTime.of(2016, 1, 9, 10, 0, 0), LocalDateTime.of(2016, 2, 1, 0, 0, 0), LocalDateTime.of(2018, 6, 30, 23, 0, 0)};
        int index = 0;
        int expResult = 31;
        int result = LAPR1_1DK_Mafia.getMonthLength(dateTime, index);
        assertEquals(expResult, result);
    }

    /**
     * Test of getMonthLength method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testGetMonthLengthFeb() {
        System.out.println("getMonthLengthFebruary");
        LocalDateTime[] dateTime = {LocalDateTime.of(2016, 1, 9, 10, 0, 0), LocalDateTime.of(2016, 2, 1, 0, 0, 0), LocalDateTime.of(2018, 6, 30, 23, 0, 0)};
        int index = 1;
        int expResult = 29;
        int result = LAPR1_1DK_Mafia.getMonthLength(dateTime, index);
        assertEquals(expResult, result);
    }

    /**
     * Test of getMonthLength method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testGetMonthLengthJun() {
        System.out.println("getMonthLengthJune");
        LocalDateTime[] dateTime = {LocalDateTime.of(2016, 1, 9, 10, 0, 0), LocalDateTime.of(2016, 2, 1, 0, 0, 0), LocalDateTime.of(2018, 6, 30, 23, 0, 0)};
        int index = 2;
        int expResult = 30;
        int result = LAPR1_1DK_Mafia.getMonthLength(dateTime, index);
        assertEquals(expResult, result);
    }

    /**
     * Test of annualPeriod method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testAnnualPeriod() throws Exception {
        System.out.println("annualPeriod - 1 ano completo + 1 incompleto");
        int[] auxConsumptionMW = new int[26280];
        LocalDateTime[] auxDateTime = new LocalDateTime[26280];
        LAPR1_1DK_Mafia.readFile(auxConsumptionMW, auxDateTime, args);
        
        int[] consumptionMW = Arrays.copyOf(auxConsumptionMW, 9500);
        LocalDateTime[] dateTime = Arrays.copyOf(auxDateTime, 9500);
        int size = 9500;
        LAPR1_1DK_Mafia.annualPeriod(consumptionMW, dateTime, size);
        int[] expResult = {17825259, 1492234};
        int[] result = Arrays.copyOf(consumptionMW, 2);
        System.out.println(Arrays.toString(expResult));
        System.out.println(Arrays.toString(result));
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of exchangeInfoDayPeriods method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testExchangeInfoDayPeriods() {
        System.out.println("exchangeInfoDayPeriods - 1 mês");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = null;
        int size = consumptionMW.length;
        int start = 0;
        int expResult = 31;
        int result = LAPR1_1DK_Mafia.exchangeInfoDayPeriods(consumptionMW, size, start, dateTime);
        assertEquals(expResult, result);
    }

    /**
     * Test of exchangeInfoDays method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testExchangeInfoDays() {
        System.out.println("exchangeInfoDays - 1 mês");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910, 1846, 1786, 1737, 1713, 1706, 1727, 1771, 1843, 1934, 1951, 1975, 1988, 1947, 1918, 1855, 1807, 1780, 1791, 1924, 2012, 1997, 1984, 1942, 1875, 1798, 1733, 1683, 1660, 1651, 1655, 1683, 1729, 1809, 1850, 1925, 1951, 1955, 1963, 1934, 1925, 1955, 2010, 2136, 2182, 2159, 2133, 2045, 1952, 1897, 1837, 1807, 1800, 1812, 1862, 1997, 2204, 2346, 2355, 2340, 2334, 2315, 2325, 2336, 2311, 2298, 2323, 2432, 2513, 2502, 2478, 2418, 2294, 2185, 2124, 2090, 2063, 2086, 2141, 2272, 2484, 2607, 2578, 2532, 2482, 2405, 2359, 2307, 2260, 2215, 2250, 2384, 2497, 2498, 2466, 2392, 2279, 2167, 2103, 2056, 2043, 2040, 2097, 2222, 2441, 2559, 2508, 2473, 2420, 2357, 2292, 2250, 2198, 2159, 2184, 2308, 2399, 2390, 2351, 2287, 2176, 2065, 2009, 1968, 1947, 1943, 2003, 2127, 2341, 2474, 2431, 2381, 2319, 2253, 2206, 2148, 2094, 2047, 2034, 2169, 2269, 2276, 2256, 2194, 2078, 1954, 1880, 1825, 1792, 1779, 1821, 1926, 2129, 2252, 2251, 2247, 2258, 2247, 2226, 2206, 2170, 2120, 2115, 2163, 2155, 2093, 2049, 1965, 1860, 1727, 1631, 1567, 1531, 1511, 1510, 1553, 1621, 1702, 1751, 1809, 1845, 1842, 1832, 1800, 1763, 1749, 1772, 1857, 1887, 1858, 1807, 1750, 1675, 1594, 1543, 1476, 1445, 1423, 1432, 1470, 1554, 1679, 1775, 1868, 1939, 2012, 2069, 2106, 2111, 2131, 2197, 2313, 2421, 2415, 2409, 2363, 2283, 2224, 2192, 2171, 2169, 2185, 2236, 2383, 2592, 2735, 2744, 2734, 2718, 2691, 2666, 2624, 2581, 2518, 2543, 2655, 2726, 2696, 2620, 2522, 2378, 2267, 2171, 2109, 2064, 2045, 2070, 2179, 2367, 2474, 2470, 2496, 2485, 2489, 2505, 2500, 2497, 2485, 2520, 2673, 2816, 2796, 2742, 2651, 2538, 2455, 2390, 2355, 2336, 2347, 2395, 2518, 2705, 2841, 2854, 2798, 2739, 2694, 2656, 2637, 2622, 2596, 2610, 2683, 2743, 2700, 2615, 2527, 2385, 2271, 2180, 2124, 2083, 2076, 2108, 2229, 2415, 2538, 2492, 2448, 2386, 2312, 2254, 2208, 2162, 2110, 2087, 2172, 2281, 2268, 2236, 2159, 2035, 1929, 1853, 1799, 1768, 1767, 1813, 1932, 2127, 2258, 2241, 2239, 2250, 2237, 2211, 2200, 2178, 2140, 2156, 2222, 2223, 2168, 2113, 2050, 1960, 1844, 1790, 1738, 1730, 1721, 1741, 1794, 1874, 1972, 2054, 2116, 2150, 2152, 2143, 2123, 2100, 2099, 2113, 2167, 2187, 2154, 2116, 2062, 1978, 1890, 1821, 1770, 1748, 1754, 1768, 1808, 1871, 1948, 2008, 2076, 2106, 2131, 2133, 2142, 2172, 2172, 2220, 2361, 2506, 2515, 2521, 2492, 2428, 2389, 2350, 2323, 2329, 2341, 2393, 2503, 2667, 2799, 2830, 2845, 2820, 2778, 2742, 2706, 2678, 2620, 2649, 2768, 2885, 2880, 2828, 2749, 2627, 2526, 2456, 2415, 2389, 2387, 2424, 2542, 2723, 2863, 2871, 2801, 2723, 2670, 2615, 2560, 2489, 2459, 2455, 2567, 2714, 2708, 2693, 2625, 2511, 2409, 2325, 2277, 2237, 2223, 2265, 2372, 2580, 2684, 2680, 2684, 2696, 2676, 2650, 2613, 2563, 2515, 2532, 2621, 2703, 2679, 2635, 2551, 2420, 2312, 2240, 2212, 2210, 2221, 2277, 2399, 2603, 2724, 2712, 2693, 2623, 2552, 2489, 2442, 2380, 2324, 2359, 2479, 2583, 2576, 2558, 2472, 2359, 2246, 2169, 2134, 2106, 2099, 2142, 2256, 2456, 2583, 2576, 2575, 2580, 2564, 2539, 2500, 2470, 2433, 2442, 2498, 2574, 2528, 2492, 2430, 2319, 2182, 2089, 2025, 1994, 1978, 1993, 2035, 2108, 2212, 2278, 2329, 2345, 2306, 2224, 2146, 2072, 2040, 2049, 2122, 2241, 2231, 2219, 2187, 2124, 2039, 1981, 1952, 1946, 1946, 1969, 2010, 2071, 2154, 2186, 2176, 2128, 2078, 2033, 1994, 1948, 1932, 1959, 2073, 2196, 2215, 2194, 2139, 2053, 1993, 1948, 1919, 1914, 1925, 1980, 2110, 2336, 2468, 2455, 2408, 2378, 2295, 2253, 2234, 2228, 2197, 2181, 2284, 2340, 2317, 2248, 2149, 2016, 1898, 1820, 1765, 1727, 1709, 1759, 1880, 2111, 2274, 2283, 2305, 2331, 2342, 2346, 2339, 2326, 2316, 2326, 2411, 2459, 2428, 2386, 2314, 2185, 2082, 2014, 1966, 1943, 1941, 1993, 2128, 2330, 2470, 2454, 2450, 2449, 2423, 2405, 2394, 2366, 2341, 2375, 2445, 2515, 2486, 2446, 2380, 2250, 2161, 2091, 2051, 2009, 1998, 2028, 2138, 2338, 2447, 2419, 2377, 2335, 2253, 2225, 2170, 2132, 2096, 2126, 2222, 2292, 2280, 2243, 2161, 2051, 1937, 1874, 1830, 1822, 1823, 1871, 1998, 2206, 2338, 2340, 2356, 2366, 2317, 2254, 2206, 2134, 2069, 2066, 2111, 2239, 2233, 2205, 2166, 2066, 1950, 1848, 1777, 1751, 1741, 1753, 1796, 1871, 1958, 1991, 1996, 1952, 1897, 1825, 1771, 1724, 1675, 1667, 1724, 1823, 1792, 1761, 1710, 1632, 1556, 1495, 1449, 1421, 1405, 1405, 1430, 1491, 1556, 1611, 1677, 1698, 1710, 1712, 1693, 1680, 1679, 1699, 1785, 1855, 1833, 1793, 1722, 1646};
        LocalDateTime[] dateTime = null;
        int size = consumptionMW.length;
        int period = 24;
        int expResult = 31;
        int result = LAPR1_1DK_Mafia.exchangeInfoDays(consumptionMW, size, period, dateTime);
        assertEquals(expResult, result);
    }

    /**
     * Test of exchangeInfoMonthsYears method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testExchangeInfoMonths() throws Exception {
        System.out.println("exchangeInfoMonths - 2 meses");
         int[] auxConsumptionMW = new int[26280];
        LocalDateTime[] auxDateTime = new LocalDateTime[26280];
        LAPR1_1DK_Mafia.readFile(auxConsumptionMW, auxDateTime, args);
        
        int[] consumptionMW = {1793,1741,1694,1659,1630,1643,1677,1719,1780,1793,1854,1883,1906,1904,1890,1886,1890,1924,2039,2079,2058,2029,1982,1910,1846,1786,1737,1713,1706,1727,1771,1843,1934,1951,1975,1988,1947,1918,1855,1807,1780,1791,1924,2012,1997,1984,1942,1875,1798,1733,1683,1660,1651,1655,1683,1729,1809,1850,1925,1951,1955,1963,1934,1925,1955,2010,2136,2182,2159,2133,2045,1952,1897,1837,1807,1800,1812,1862,1997,2204,2346,2355,2340,2334,2315,2325,2336,2311,2298,2323,2432,2513,2502,2478,2418,2294,2185,2124,2090,2063,2086,2141,2272,2484,2607,2578,2532,2482,2405,2359,2307,2260,2215,2250,2384,2497,2498,2466,2392,2279,2167,2103,2056,2043,2040,2097,2222,2441,2559,2508,2473,2420,2357,2292,2250,2198,2159,2184,2308,2399,2390,2351,2287,2176,2065,2009,1968,1947,1943,2003,2127,2341,2474,2431,2381,2319,2253,2206,2148,2094,2047,2034,2169,2269,2276,2256,2194,2078,1954,1880,1825,1792,1779,1821,1926,2129,2252,2251,2247,2258,2247,2226,2206,2170,2120,2115,2163,2155,2093,2049,1965,1860,1727,1631,1567,1531,1511,1510,1553,1621,1702,1751,1809,1845,1842,1832,1800,1763,1749,1772,1857,1887,1858,1807,1750,1675,1594,1543,1476,1445,1423,1432,1470,1554,1679,1775,1868,1939,2012,2069,2106,2111,2131,2197,2313,2421,2415,2409,2363,2283,2224,2192,2171,2169,2185,2236,2383,2592,2735,2744,2734,2718,2691,2666,2624,2581,2518,2543,2655,2726,2696,2620,2522,2378,2267,2171,2109,2064,2045,2070,2179,2367,2474,2470,2496,2485,2489,2505,2500,2497,2485,2520,2673,2816,2796,2742,2651,2538,2455,2390,2355,2336,2347,2395,2518,2705,2841,2854,2798,2739,2694,2656,2637,2622,2596,2610,2683,2743,2700,2615,2527,2385,2271,2180,2124,2083,2076,2108,2229,2415,2538,2492,2448,2386,2312,2254,2208,2162,2110,2087,2172,2281,2268,2236,2159,2035,1929,1853,1799,1768,1767,1813,1932,2127,2258,2241,2239,2250,2237,2211,2200,2178,2140,2156,2222,2223,2168,2113,2050,1960,1844,1790,1738,1730,1721,1741,1794,1874,1972,2054,2116,2150,2152,2143,2123,2100,2099,2113,2167,2187,2154,2116,2062,1978,1890,1821,1770,1748,1754,1768,1808,1871,1948,2008,2076,2106,2131,2133,2142,2172,2172,2220,2361,2506,2515,2521,2492,2428,2389,2350,2323,2329,2341,2393,2503,2667,2799,2830,2845,2820,2778,2742,2706,2678,2620,2649,2768,2885,2880,2828,2749,2627,2526,2456,2415,2389,2387,2424,2542,2723,2863,2871,2801,2723,2670,2615,2560,2489,2459,2455,2567,2714,2708,2693,2625,2511,2409,2325,2277,2237,2223,2265,2372,2580,2684,2680,2684,2696,2676,2650,2613,2563,2515,2532,2621,2703,2679,2635,2551,2420,2312,2240,2212,2210,2221,2277,2399,2603,2724,2712,2693,2623,2552,2489,2442,2380,2324,2359,2479,2583,2576,2558,2472,2359,2246,2169,2134,2106,2099,2142,2256,2456,2583,2576,2575,2580,2564,2539,2500,2470,2433,2442,2498,2574,2528,2492,2430,2319,2182,2089,2025,1994,1978,1993,2035,2108,2212,2278,2329,2345,2306,2224,2146,2072,2040,2049,2122,2241,2231,2219,2187,2124,2039,1981,1952,1946,1946,1969,2010,2071,2154,2186,2176,2128,2078,2033,1994,1948,1932,1959,2073,2196,2215,2194,2139,2053,1993,1948,1919,1914,1925,1980,2110,2336,2468,2455,2408,2378,2295,2253,2234,2228,2197,2181,2284,2340,2317,2248,2149,2016,1898,1820,1765,1727,1709,1759,1880,2111,2274,2283,2305,2331,2342,2346,2339,2326,2316,2326,2411,2459,2428,2386,2314,2185,2082,2014,1966,1943,1941,1993,2128,2330,2470,2454,2450,2449,2423,2405,2394,2366,2341,2375,2445,2515,2486,2446,2380,2250,2161,2091,2051,2009,1998,2028,2138,2338,2447,2419,2377,2335,2253,2225,2170,2132,2096,2126,2222,2292,2280,2243,2161,2051,1937,1874,1830,1822,1823,1871,1998,2206,2338,2340,2356,2366,2317,2254,2206,2134,2069,2066,2111,2239,2233,2205,2166,2066,1950,1848,1777,1751,1741,1753,1796,1871,1958,1991,1996,1952,1897,1825,1771,1724,1675,1667,1724,1823,1792,1761,1710,1632,1556,1495,1449,1421,1405,1405,1430,1491,1556,1611,1677,1698,1710,1712,1693,1680,1679,1699,1785,1855,1833,1793,1722,1646,1578,1521,1509,1498,1522,1582,1726,1972,2116,2134,2137,2140,2120,2119,2084,2031,1963,1955,2008,2177,2200,2181,2123,2027,1924,1866,1833,1809,1808,1864,1976,2198,2327,2300,2279,2245,2218,2201,2141,2076,2029,2048,2091,2173,2133,2086,2008,1877,1753,1685,1626,1583,1573,1596,1706,1901,2032,2016,2006,2003,1983,1971,1962,1940,1914,1923,2002,2144,2158,2141,2100,1986,1892,1825,1803,1767,1778,1833,1965,2189,2329,2345,2349,2383,2375,2375,2352,2337,2310,2326,2378,2461,2444,2418,2338,2218,2119,2057,2012,2001,2003,2049,2179,2407,2514,2461,2399,2329,2264,2199,2154,2094,2046,2061,2103,2206,2190,2170,2124,2039,1928,1855,1806,1798,1791,1832,1894,1992,2103,2127,2118,2072,2012,1945,1884,1825,1782,1792,1835,1977,2007,1998,1962,1889,1804,1741,1694,1679,1676,1675,1704,1776,1837,1867,1882,1856,1841,1802,1761,1728,1722,1749,1827,1920,1894,1864,1827,1780,1734,1671,1631,1626,1630,1680,1820,2053,2201,2207,2210,2237,2248,2252,2231,2183,2172,2186,2250,2351,2368,2343,2277,2170,2078,2014,1975,1951,1963,2003,2132,2331,2449,2468,2490,2509,2498,2494,2480,2479,2465,2477,2527,2614,2606,2540,2469,2345,2258,2192,2164,2137,2148,2191,2325,2522,2633,2662,2649,2641,2591,2563,2556,2543,2537,2564,2633,2746,2744,2714,2640,2511,2410,2344,2294,2270,2278,2335,2467,2686,2796,2751,2680,2626,2555,2505,2488,2458,2416,2418,2457,2586,2606,2574,2504,2413,2317,2260,2228,2211,2220,2272,2364,2549,2638,2627,2607,2591,2524,2498,2482,2448,2409,2424,2449,2517,2542,2506,2467,2376,2269,2198,2151,2139,2142,2166,2221,2312,2389,2412,2409,2385,2341,2285,2249,2219,2214,2224,2255,2385,2411,2404,2373,2309,2252,2197,2156,2137,2133,2146,2172,2228,2280,2329,2335,2273,2221,2234,2218,2221,2260,2303,2362,2441,2457,2418,2352,2272,2206,2164,2112,2084,2082,2113,2210,2347,2460,2481,2511,2527,2504,2466,2443,2408,2364,2354,2388,2461,2446,2388,2279,2164,2044,1981,1927,1898,1898,1915,2048,2261,2379,2375,2398,2406,2402,2390,2373,2352,2312,2310,2345,2425,2424,2390,2307,2166,2058,1984,1950,1924,1916,1949,2076,2293,2405,2407,2402,2379,2318,2280,2254,2229,2207,2233,2288,2374,2388,2349,2271,2146,2021,1956,1910,1877,1878,1925,2070,2304,2414,2390,2360,2299,2236,2213,2172,2139,2100,2131,2195,2312,2341,2313,2238,2111,1991,1916,1859,1831,1813,1853,1981,2170,2254,2245,2241,2210,2128,2088,2046,2006,1940,1915,1917,1982,1992,1943,1879,1780,1651,1551,1495,1468,1452,1467,1513,1595,1673,1723,1761,1753,1717,1689,1642,1607,1580,1582,1584,1659,1700,1674,1622,1554,1476,1412,1383,1367,1364,1367,1408,1467,1524,1600,1647,1656,1643,1623,1600,1576,1568,1590,1645,1773,1859,1851,1811,1750,1710,1675,1661,1662,1686,1759,1901,2146,2257,2241,2212,2194,2095,2100,2014,2009,1965,1960,2003,2120,2182,2163,2094,1993,1902,1848,1816,1794,1810,1870,2000,2223,2316,2287,2246,2223,2155,2118,2079,2017,1974,1956,2002,2117,2166,2139,2065,1950,1855,1794,1755,1735,1737,1785,1912,2122,2245,2244,2262,2264,2232,2214,2178,2146,2113,2135,2197,2264,2274,2247,2174,2066,1971,1919,1883,1871,1874,1913,2026,2255,2338,2357,2365,2383,2362,2362,2359,2341,2328,2346,2387,2463,2467,2421,2347,2228,2126,2046,1996,1959,1945,1982,2097,2300,2394,2401,2395,2372,2321,2277,2259,2229,2198,2197,2216,2273,2269,2231,2164,2047,1924,1828,1773,1734,1732,1748,1794,1875,1926,1973,1994,1965,1917,1846,1792,1740,1698,1689,1704,1803,1864,1849,1813,1743,1661,1603,1566,1542,1537,1551,1578,1640,1673,1707,1722,1693,1663,1646,1613,1582,1560,1571,1607,1707,1797,1781,1717,1651,1584,1542,1507,1508,1531,1606,1759,1998,2129,2157,2197,2209,2169,2122,2081,2029,1978,1960,1978,2062,2150,2111,2046,1924};
        LocalDateTime[] dateTime = Arrays.copyOf(auxDateTime, consumptionMW.length);
        int size = consumptionMW.length;
        int numOccorrences = 2;
        boolean isMonth = true;
        int expResult = 2;
        int result = LAPR1_1DK_Mafia.exchangeInfoMonthsYears(consumptionMW, dateTime, size, numOccorrences, isMonth);
        System.out.println(result);
        assertEquals(expResult, result);
    }

    /**
     * Test of averages method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testAverages() throws Exception {
        System.out.println("averages");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910};
        LocalDateTime[] dateTime = null;
        int size = consumptionMW.length;
        int expResult = 1848;
        int result = LAPR1_1DK_Mafia.averages(consumptionMW, size, args, out);
        assertEquals(expResult, result);
    }

    /**
     * Test of inverseMergeSort method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testInverseMergeSort() {
        System.out.println("inverseMergeSort");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910};
        int start = 0;
        int end = consumptionMW.length - 1;
        LAPR1_1DK_Mafia.inverseMergeSort(consumptionMW, start, end);
        int[] expResult = {2079, 2058, 2039, 2029, 1982, 1924, 1910, 1906, 1904, 1890, 1890, 1886, 1883, 1854, 1793, 1793, 1780, 1741, 1719, 1694, 1677, 1659, 1643, 1630};
        int[] result = consumptionMW;
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of mergeSort method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testMergeSort() {
        System.out.println("mergeSort");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910};
        int start = 0;
        int end = consumptionMW.length - 1;
        LAPR1_1DK_Mafia.mergeSort(consumptionMW, start, end);
        int[] expResult = {1630, 1643, 1659, 1677, 1694, 1719, 1741, 1780, 1793, 1793, 1854, 1883, 1886, 1890, 1890, 1904, 1906, 1910, 1924, 1982, 2029, 2039, 2058, 2079};
        int[] result = consumptionMW;
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of MediaMovelSimples method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Not working - verificar
    public void testMediaMovelSimples() throws Exception {
        System.out.println("MediaMovelSimples");
        int[] auxConsumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910};
        int n = 5;
        double[] result = LAPR1_1DK_Mafia.MediaMovelSimples(auxConsumptionMW, auxConsumptionMW.length, args, out);
        double[] expResult = {2037.4, 2006.4, 1976.8, 1950.2, 1925.2, 1906.8, 1900, 1895.2, 1890.6, 1880.6, 1861.2, 1841.8, 1820.6, 1792.2, 1765.2, 1745.4, 1722.2, 1698, 1678.4, 1660.6};
        System.out.println(Arrays.toString(result));
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of MediaMovelPesada method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working
    public void testMediaMovelPesada() throws Exception {
        System.out.println("MediaMovelPesada - anual");
        int[] consumptionMW = {17825259, 17295849, 10604815};
                int size = consumptionMW.length;
        double[] result = LAPR1_1DK_Mafia.MediaMovelPesada(consumptionMW, size, args, out);
        double[] expResult = {17825259, 17666436, 15547949.7};
        System.out.println(Arrays.toString(result));
        assertTrue(Arrays.equals(expResult, result));
    }

    /**
     * Test of absoluteError method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Not working - verificar
    public void testAbsoluteErrorSimples() {
        System.out.println("absoluteErrorSimples");
        int[] consumptionMW = {1793, 1741, 1694, 1659, 1630, 1643, 1677, 1719, 1780, 1793, 1854, 1883, 1906, 1904, 1890, 1886, 1890, 1924, 2039, 2079, 2058, 2029, 1982, 1910};
        double[] arrayY = {2037.4, 2006.4, 1976.8, 1950.2, 1925.2, 1906.8, 1900, 1895.2, 1890.6, 1880.6, 1861.2, 1841.8, 1820.6, 1792.2, 1765.2, 1745.4, 1722.2, 1698, 1678.4, 1660.6};
        int size = arrayY.length;
        double result = LAPR1_1DK_Mafia.absoluteError(consumptionMW, arrayY, size);
        double expResult = 39.96;
        System.out.println(result);
        assertTrue(result == expResult);
    }
    /**
     * Test of absoluteError method, of class LAPR1_1DK_Mafia.
     */
    @Test
    //Working - almost
    public void testAbsoluteErrorPesada() throws Exception{
        System.out.println("absoluteErrorPesada");
        int[] consumptionMW = {17825259, 17295849, 10604815};
        double[] arrayY = {17825259, 17666436, 15547949.7};
        int size = arrayY.length;
        double result = LAPR1_1DK_Mafia.absoluteError(consumptionMW, arrayY, size);
        double expResult = 5313721.7/3.0;
        System.out.println(expResult);
        System.out.println(result);
        assertTrue(result == expResult);
    }

    /**
     * Test of definePrevision method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testDefinePrevision() throws Exception {
        System.out.println("definePrevision");
        int[] consumptionMW = null;
        LocalDateTime[] dateTime = null;
        int size = 0;
        int option = 0;
        LAPR1_1DK_Mafia.definePrevision(consumptionMW, dateTime, size, option);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of verifyDay method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testVerifyDay() throws Exception {
        System.out.println("verifyDay");
        int[] consumption = null;
        LocalDateTime[] dateTime = null;
        int size = 0;
        int year = 0;
        int monthsNumber = 0;
        int daysNumber = 0;
        LAPR1_1DK_Mafia.verifyDay(consumption, dateTime, size, year, monthsNumber, daysNumber);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of verifyMonth method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testVerifyMonth() throws Exception {
        System.out.println("verifyMonth");
        int[] consumption = null;
        LocalDateTime[] dateTime = null;
        int size = 0;
        int year = 0;
        int monthsNumber = 0;
        boolean mark = false;
        LAPR1_1DK_Mafia.verifyMonth(consumption, dateTime, size, year, monthsNumber, mark);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of verifyYear method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testVerifyYear() throws Exception {
        System.out.println("verifyYear");
        int[] consumption = null;
        LocalDateTime[] dateTime = null;
        int size = 0;
        boolean flag = false;
        boolean mark = false;
        LAPR1_1DK_Mafia.verifyYear(consumption, dateTime, size, flag, mark);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of previsionType method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testPrevisionType() throws Exception {
        System.out.println("previsionType");
        int[] consumption = null;
        LocalDateTime[] dateTime = null;
        int size = 0;
        LAPR1_1DK_Mafia.previsionType(consumption, dateTime, size);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of previsionMediaSimples method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testPrevisionMediaSimples() throws Exception {
        System.out.println("previsionMediaSimples");
        int[] consumptionMW = null;
        int size = 0;
        int n = 0;
        LAPR1_1DK_Mafia.previsionMediaSimples(consumptionMW, size);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of previsionMediaMovelPesada method, of class LAPR1_1DK_Mafia.
     */
    @Test
    public void testPrevisionMediaMovelPesada() {
        System.out.println("previsionMediaMovelPesada");
        int[] consumptionMW = null;
        double[] consumptionNewMW = null;
        int size = 0;
        double alpha = 0.0;
        LAPR1_1DK_Mafia.previsionMediaMovelPesada(consumptionMW, size);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
}
